// See https://aka.ms/new-console-template for more information
using CarbonBlazor.Generator;
using System.Globalization;
using System.Text;
using System.Text.Json;

Console.WriteLine("Hello, World!");

const string ManifestJsonPath = @".\custom-elements.json";

var json = File.ReadAllText(ManifestJsonPath);
var options = new JsonSerializerOptions
{
    PropertyNameCaseInsensitive = true
};
var cds = JsonSerializer.Deserialize<CarbonJson>(json, options);
var builder = new StringBuilder();

if (!Directory.Exists(@"./output")) Directory.CreateDirectory(@"./output");

if (cds?.Tags.Length > 0)
{
    var keys = new List<string>() { "INPUT_SIZE" };
    foreach (var tag in cds.Tags)
    {
        var className = FormatName(tag.Name);
        if (!Directory.Exists($@"D:\repository\own\enjouauth\CarbonBlazor\Components1\{className?.Replace("Cds", "")}")) 
            Directory.CreateDirectory($@"D:\repository\own\enjouauth\CarbonBlazor\Components1\{className?.Replace("Cds","")}");

        builder.Clear()
            .AppendLine($"public class {className} : BaseComponent")
            .AppendLine("{");

        if (className == "CdsActionableNotificationButton")
        {
            var j = 0;
        }

        foreach (var prop in tag.Properties)
        {
            var n = FormatName(prop.Name);
            var t = prop.Type?.Replace(" | undefined", "");
            var v = string.Empty;

            if (prop.Type == "boolean")
                t = "bool";
            else if (prop.Type == "number" || prop.Type == "number | null")
                t = "int";
            else if (prop.Type?.Contains("Locale") == true)
                t = "CultureInfo";
            else if (prop.Type == "string | undefined")
                t = "string";

            if (string.IsNullOrWhiteSpace(t))
                t = "string";

            if (string.IsNullOrWhiteSpace(prop.DefaultValue?.Replace("\"","")) || prop.Name == "styles")
                t += "?";

            if (!string.IsNullOrWhiteSpace(prop.DefaultValue?.Replace("\"", ""))
                && prop.Name != "styles"
                && !(t == "bool" && prop.DefaultValue == "false"))
                v = $" = {prop.DefaultValue};";

            var ttt = prop.Type?.Replace(" | undefined", "");
            if (!string.IsNullOrWhiteSpace(ttt) && char.IsUpper(ttt[^1]))
            {
                var vv = prop.DefaultValue?.Trim('"');

                if (prop.DefaultValue == "\"\"")
                    vv = "_NONE";

                if (!keys.Contains(ttt))
                {
                    builder.Insert(0, @$"
public enum {ttt}
{{
    [Description(""{vv}"")]
    {FormatName(vv)},
}}
");
                    keys.Add(ttt);
                }

                if (!string.IsNullOrWhiteSpace(prop.DefaultValue?.Replace("\"", "")))
                    v = $" = {ttt}.{FormatName(vv)};";
            }
            var isFunc = prop.Type?.Contains(" => ") == true;
            var isEl = prop.Type == "HTMLInputElement" ||
                prop.Type?.Contains("Instance") == true ||
                prop.Type == "CDSOverflowMenuItem | null";

            if (!string.IsNullOrWhiteSpace(prop.Description))
            {
                builder.AppendLine("    /// <summary>");
                builder.AppendLine($@"    /// {prop.Description.Replace("\n", "\n    /// ")}");
                if (isFunc || isEl)
                    builder.AppendLine($@"    /// <para><b>Type : {prop.Type}</b></para>");
                builder.AppendLine("    /// </summary>");
            }
            else if (isFunc || isEl)
            {
                builder.AppendLine("    /// <summary>");
                builder.AppendLine($@"    /// <para><b>Type : {prop.Type}</b></para>");
                builder.AppendLine("    /// </summary>");
            }

            if (prop.Name == "shadowRootOptions")
            {
                t = "ShadowRootOptions";
                if (!string.IsNullOrWhiteSpace(prop.DefaultValue?.Replace("\"", "")))
                    v = $" = new ShadowRootOptions() {prop.DefaultValue.Replace("\"", "").Replace(":", " = ").Replace("delegatesFocus", "DelegatesFocus")};";
            }

            if (isFunc)
            {
                t = "string?";
            }
            else if (isEl)
            {
                t = "ElementRef?";
            }

            if (prop.Type?.Contains("Set<") == true)
            {
                var tt = prop.Type.Replace("Set<", "").Replace(">", "").Trim();
                t = $"{tt}[]";
                if (!string.IsNullOrWhiteSpace(prop.DefaultValue?.Replace("\"", "")))
                    v = $" = {prop.DefaultValue?.Replace("\"", "").Replace("new Set([", "[").Replace("])", "]").Replace("'","\"")};";
            }

            if (prop.Type?.Contains("Locale") == true && prop.DefaultValue?.Replace("\"", "") == "default")
                v = " = CultureInfo.CurrentCulture;";

            builder.AppendLine($"    [Parameter]").AppendLine($"    public {t} {n} {{ get; set; }}{v}").AppendLine();
        }


        builder.AppendLine(@$"    [Parameter]
    public RenderFragment? ChildContent {{ get; set; }}

    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {{
        builder
            .OpenElementAnd(0, ""{tag.Name}"")
            .SetAttribute(1, ""id"", Id)
            .SetAttributeNotNull(2, ""slot"", Slot)");

        var i = 3;
        foreach (var prop in tag.Properties)
        {
            if (string.IsNullOrWhiteSpace(prop.DefaultValue))
                builder.AppendLine($"            .SetAttribute({i}, \"{prop.Attribute}\", {FormatName(prop.Name)})");
            else
                builder.AppendLine($"            .SetAttributeNotNull({i}, \"{prop.Attribute ?? prop.Name?.ToLower()}\", {FormatName(prop.Name)})");
            i++;
        }

        builder.Append(@$"            .SetAttributes({i++}, AdditionalAttributes)
            .SetContent({i++}, ChildContent)
            .CloseElement();
    }}").AppendLine("}").AppendLine();

        builder.Insert(0, @"using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using System.ComponentModel;
using System.Globalization;

namespace CarbonBlazor;
");
        File.WriteAllText($@"D:\repository\own\enjouauth\CarbonBlazor\Components1\{className?.Replace("Cds", "")}/{className}.cs", builder.ToString());
    }
}

Console.ReadLine();

static string? FormatName(string? s)
{
    if (string.IsNullOrWhiteSpace(s))
        return null;

    return string.Join("", s.Split('-').SelectMany(x =>
    {
        if (x.Length > 1)
            return char.ToUpper(x[0]).ToString() + x[1..];
        else if (x.Length == 1)
            return char.ToUpper(x[0]).ToString();
        else
            return "?";
    }));
}